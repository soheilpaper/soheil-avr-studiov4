;//-----------------------------------------------------------------------------
;// Copyright:      	RAD Electronic Co. LTD,
;// Author:         	Sh. Nourbakhsh Rad
;// Remarks:
;// known Problems: 	none
;// Version:        	2.0.1
;// Description:    	NOKIA 1100 Display (PCF8814) simple FONT
;//
;//-----------------------------------------------------------------------------
;
;#include "sFONT.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;//******************* Constants
;	const unsigned char    *FontPntr; 								// Font	Pointer
;	unsigned char						HeaderSize;								// Font specification size
;	unsigned char						CharWidth;								// Font width
;	unsigned char						FntHeight;								// Font height
;
;#if (SFNsimple ==1)
;	unsigned char 					FntSpaceX 	= 1;					// Space between char
;
;#else
;	unsigned char						CursorX 		= 0;					// X position
;	unsigned char						CursorY 		= 0;					// Y position
;
;	unsigned char 					FntSpaceX 	= 1;					// Space between char

	.DSEG
;	unsigned char 					FntSpaceY		= 0;					// Space between lines
;#endif
;
;//******************* Functions *******************
;void N11_FontSelect(const unsigned char *Fpntr)
; 0002 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0022 	FontPntr 				= Fpntr;
;PCODE: $0000000F VOL: 0
;	*Fpntr -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0002 0023 
; 0002 0024 	HeaderSize 			= pgm_read_byte(&FontPntr[0]);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0025 	CharWidth  			= pgm_read_byte(&FontPntr[1]);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0026 	FntHeight 			= pgm_read_byte(&FontPntr[2]);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 0027 }	//N11_FontSelect
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;//--------------------------------------------------
;#if (SFNsimple ==1)
;	void N11_PrintChar(char ch)
;#else
;	void N11_PrintChar(char ch, N11_Pmode color)
; 0002 002E #endif
; 0002 002F 	{
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 0030 		unsigned char 			xc,	yc;
; 0002 0031 		unsigned char 			i;
; 0002 0032 
; 0002 0033 		unsigned char 			Cbyte;
; 0002 0034 		unsigned short			Cpos = ((unsigned short)(ch -' ') *CharWidth) +HeaderSize;
; 0002 0035 
; 0002 0036 		for(xc=0; xc<CharWidth; xc++)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;	ch -> Y+8
;	color -> Y+6
;	xc -> R17
;	yc -> R16
;	i -> R19
;	Cbyte -> R18
;	Cpos -> R20,R21
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0037 		{
; 0002 0038 	  	Cbyte = pgm_read_byte(&FontPntr[Cpos +xc]) <<1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0039 
; 0002 003A 	#if (SFNsimple ==1)
; 0002 003B 			N11_Write(data,	Cbyte);
; 0002 003C 		}//for xc
; 0002 003D 
; 0002 003E 		for(i=0; i<FntSpaceX; i++)
; 0002 003F 			N11_Write(data, 0x00);
; 0002 0040 
; 0002 0041 	#else
; 0002 0042 			for(yc = 0; yc<FntHeight; yc++)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 0043 			{
; 0002 0044 				if(BitIsSet(Cbyte, yc))						N11_SetPixel(xc +CursorX, yc +CursorY, color);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0002 0045 				else															N11_SetPixel(xc +CursorX, yc +CursorY, WHITE);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0002 0046 			}
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 0047 		}//for xc
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0048 
; 0002 0049 		CursorX	+= (CharWidth +FntSpaceX);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 004A 
; 0002 004B 	#endif
; 0002 004C 	}	//N11_PrintChar
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;#if (SFNsimple ==1)
;	void N11_PrintString(char *str)
;#else
;	void N11_PrintString(char *str, N11_Pmode color)
; 0002 0052 #endif
; 0002 0053 	{
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 0054 		register char			chr;
; 0002 0055 
; 0002 0056 		N11_Write(cmd, 0xAE); 				// disable display;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;	*str -> Y+3
;	color -> Y+1
;	chr -> R17
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 0057 
; 0002 0058 		while((chr = *str++))
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0059 	#if (SFNsimple ==1)
; 0002 005A 			N11_PrintChar(chr);
; 0002 005B 	#else
; 0002 005C 			N11_PrintChar(chr, color);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 005F N11_Write(cmd, 0xAF);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0060 	}	//N11_PrintString
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;#if (SFNsimple ==0)
;void SFN_GotoXR(unsigned char x, unsigned char ln)
; 0002 0064 {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 0065 	setCursorX(x);
;PCODE: $00000092 VOL: 0
;	x -> Y+1
;	ln -> Y+0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 0066 	setCursorY(ln *(FntHeight +FntSpaceY));
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0067 }	//SFN_GotoXR
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;//--------------------------------------------------
;void N11_TypeStr(unsigned char lin, unsigned char col, char *str, unsigned char len, N11_Pmode color, unsigned char dly)
; 0002 006B {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 006C 	unsigned char				i;
; 0002 006D 
; 0002 006E 	SFN_GotoXR(col, lin);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;	lin -> Y+8
;	col -> Y+7
;	*str -> Y+5
;	len -> Y+4
;	color -> Y+2
;	dly -> Y+1
;	i -> R17
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0002 006F 	for(i=0; i<len; i++)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0002 0070 	{
; 0002 0071 		N11_PrintChar(str[i], color);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 0072 		_delay_ms(dly);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 0073 	}
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 0074 }	//N11_TypeStr
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;void N11_ChrCls(unsigned char dly)
; 0002 0077 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 0078 	unsigned char				lins 		= N11_SIZE_Y /(FntHeight +FntSpaceY);
; 0002 0079 	unsigned char				cols 		= CharWidth;
; 0002 007A 	unsigned char				tempXs 	= FntSpaceX;										//Save FntSpaceX
; 0002 007B 	unsigned char				i, j;
; 0002 007C 
; 0002 007D 	FntSpaceX = 0;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;	dly -> Y+6
;	lins -> R17
;	cols -> R16
;	tempXs -> R19
;	i -> R18
;	j -> R21
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 007E 
; 0002 007F 	for(i=0; i<N11_SIZE_X; i+=cols)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 0080 	{
; 0002 0081 		for(j=0; j<lins; j++)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0002 0082 		{
; 0002 0083 			CharAt(j, i, ' ', WHITE);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0002 0084 		}
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0002 0085 
; 0002 0086 		_delay_ms(dly);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 0087 	}
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0002 0088 
; 0002 0089 	FntSpaceX = tempXs;																					//Restore FntSpaceX
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 008A 	_delay_ms(dly *10);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0002 008B }	//N11_ChrCls
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;#endif
;
;//--------------------------------------------------
;unsigned char N11_GetStrLenC(char *str)
; 0002 0090 {
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0002 0091 	unsigned char 			i = 0;
; 0002 0092 
; 0002 0093 	while(str[i])			i++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 0095 return i;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 0096 }	//N11_GetStrLenC
;PCODE: $00000118 VOL: 0
;
;unsigned char N11_GetStrLenX(char *str)
; 0002 0099 {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0002 009A 	return (N11_GetStrLenC(str) *(CharWidth +FntSpaceX));
;PCODE: $0000011B VOL: 0
;	*str -> Y+0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 009B }	//N11_GetStrLenX
;PCODE: $00000124 VOL: 0
